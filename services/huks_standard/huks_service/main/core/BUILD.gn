# Copyright (C) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/security/huks/build/config.gni")
import("//base/security/huks/huks.gni")
import("//build/ohos.gni")

config("huks_config") {
  include_dirs = [ "include" ]
}

if (os_level == "standard") {
  ohos_static_library("libhuks_service_core_standard_static") {
    subsystem_name = "security"
    part_name = "huks"
    public_configs = [ ":huks_config" ]

    include_dirs = [
      "//base/security/huks/utils/file_operator",
      "//base/security/huks/utils/list",
      "//base/security/huks/utils/mutex",
      "//commonlibrary/c_utils/base/include",
    ]
    defines = [
      "L2_STANDARD",
      "_HARDWARE_ROOT_KEY_",
      "_HUKS_LOG_ENABLE_",
    ]
    sources = [
      "src/hks_client_check.c",
      "src/hks_client_service.c",
      "src/hks_session_manager.c",
      "src/hks_storage.c",
      "src/hks_storage_file_lock.c",
    ]
    if (non_rwlock_support) {
      sources += [ "src/hks_lock_lite.c" ]
    } else {
      sources += [ "src/hks_lock.c" ]
    }
    cflags = [
      "-Wall",
      "-Werror",
    ]
    deps = [
      "//base/security/huks/frameworks/huks_standard/main/common:libhuks_common_standard_static",
      "//base/security/huks/frameworks/huks_standard/main/os_dependency:libhuks_os_dependency_standard_static",
      "//base/security/huks/utils/file_operator:libhuks_utils_file_operator_static",
      "//base/security/huks/utils/list:libhuks_utils_list_static",
      "//base/security/huks/utils/mutex:libhuks_utils_mutex_static",
    ]

    if (enable_mock) {
      deps += [ "//base/security/huks/services/huks_standard/huks_service/main/systemapi_mock:libhuks_service_systemapi_mock_static" ]
    } else {
      deps += [ "//base/security/huks/services/huks_standard/huks_service/main/systemapi_wrap/useridm:libhuks_service_systemapi_wrap_static" ]
    }

    complete_static_lib = true

    sanitize = {
      integer_overflow = true
      cfi = true
      debug = false
    }
    sources += [
      "src/hks_hitrace.c",
      "src/hks_report.c",
    ]

    deps += [
      "//base/security/huks/services/huks_standard/huks_service/main/systemapi_wrap/hisysevent_wrapper:libhuks_utils_hisysevent_wrapper_static",
      "//base/security/huks/services/huks_standard/huks_service/main/systemapi_wrap/hitrace_meter_wrapper:libhuks_utils_hitrace_meter_wrapper_static",
    ]

    configs = [ "//base/security/huks/frameworks/config/build:coverage_flag" ]
    external_deps = [
      "c_utils:utils",
      "hitrace_native:libhitracechain",
      "hiviewdfx_hilog_native:libhilog",
    ]
  }
} else {
  ohos_static_library("libhuks_service_core_small_static") {
    public_configs = [ ":huks_config" ]

    include_dirs = [
      "//base/security/huks/utils/file_operator",
      "//base/security/huks/utils/list",
      "//base/security/huks/utils/mutex",
      "//commonlibrary/c_utils/base/include",
    ]
    defines = [ "_HUKS_LOG_ENABLE_" ]
    if (!hks_enable_test) {
      defines += [ "_HKS_ENABLE_CHECK_OLD_PATH_" ]
    }
    sources = [
      "src/hks_client_check.c",
      "src/hks_client_service.c",
      "src/hks_session_manager.c",
      "src/hks_storage_file_lock.c",
      "src/hks_storage_lite.c",
    ]
    sources += [
      "src/hks_hitrace.c",
      "src/hks_report.c",
    ]
    if (huks_use_lite_storage == true) {
      sources += [
        "src/hks_storage_adapter.c",
        "src/hks_storage_lite.c",
      ]
    } else {
      sources += [ "src/hks_storage.c" ]
    }
    if (non_rwlock_support) {
      sources += [ "src/hks_lock_lite.c" ]
    } else {
      sources += [ "src/hks_lock.c" ]
    }

    cflags = [
      "-Wall",
      "-Werror",
      "-fPIC",
    ]
    if (huks_use_hardware_root_key == true) {
      cflags += [ "-D_HARDWARE_ROOT_KEY_" ]
    }

    if (huks_use_lite_storage == true) {
      cflags += [ "-D_STORAGE_LITE_" ]
    } else {
      if (ohos_kernel_type == "liteos_a") {
        cflags += [ "-D_BSD_SOURCE" ]
      } else {
        cflags += [ "-D_DEFAULT_SOURCE" ]
      }
    }

    deps = [
      "//base/security/huks/frameworks/huks_standard/main/common:libhuks_common_small_static",
      "//base/security/huks/frameworks/huks_standard/main/os_dependency:libhuks_os_dependency_small_static",
      "//base/security/huks/utils/file_operator:libhuks_utils_file_operator_static",
      "//base/security/huks/utils/list:libhuks_utils_list_static",
      "//base/security/huks/utils/mutex:libhuks_utils_mutex_static",
    ]

    complete_static_lib = true

    deps += [
      "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
      "//commonlibrary/utils_lite:utils",
    ]
    if (huks_config_file != "") {
      print(huks_config_file)
      cflags += [ "-DHKS_CONFIG_FILE=\"${huks_config_file}\"" ]
    }
  }
}
